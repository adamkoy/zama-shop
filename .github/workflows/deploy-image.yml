name: Build & Publish Docker Image

on:
  pull_request:
    branches: [ main ]
    types: [ opened, reopened, synchronize, ready_for_review ]
    paths:
      - 'docker/**' 
      - '.github/workflows/deploy-image.yml'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  ECR_REPO: zama-shop                
  BUILD_CONTEXT: .
  DOCKERFILE: ./docker/Dockerfile

jobs:
  pr-build:
    if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, submodules: recursive }

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ACC_ROLE }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPO }}" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "${{ env.ECR_REPO }}" >/dev/null 2>&1 \
            || aws ecr describe-repositories --repository-names "${{ env.ECR_REPO }}" >/dev/null

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (PR tag)
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:dev-${{ github.event.pull_request.number }}-${{ github.sha }}
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          
 # ---------- RUN & TEST ----------
      - name: Start container
        id: run_container
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:dev-${{ github.event.pull_request.number }}-${{ github.sha }}"
          docker pull "$IMAGE"
          CID=$(docker run -d -p 4010:4010 "$IMAGE")
          echo "cid=$CID" >> "$GITHUB_OUTPUT"

          # Wait for health
          for i in {1..30}; do
            if curl -fsS http://localhost:4010/healthz | jq -e '.status=="ok"' >/dev/null 2>&1; then
              echo "Service healthy"; exit 0
            fi
            sleep 1
          done
          echo "Service failed to become healthy"
          docker logs "$CID" || true
          exit 1

      - name: Integration tests (print + assert)
        shell: bash
        run: |
          set -euo pipefail

          echo "------ curl -i /healthz"
          curl -i http://localhost:4010/healthz

          echo "Asserting /healthz.status == ok"
          curl -fsS http://localhost:4010/healthz | jq -e '.status=="ok"'

          echo "------ curl -i /pets"
          curl -i http://localhost:4010/pets

          echo "Asserting /pets is array (prefer named example, fallback)"
          (curl -fsS -H 'Prefer: example=sample' http://localhost:4010/pets || curl -fsS http://localhost:4010/pets) \
            | jq -e 'type=="array" and length>=1'

      - name: Stop container
        if: always()
        run: |
          docker logs ${{ steps.run_container.outputs.cid }} || true
          docker stop ${{ steps.run_container.outputs.cid }} || true